{"version":3,"sources":["App/Components/Spinner/index.js","App/Styles/GlobalStyles.js","App/Styles/Theme.js","App/Routes/index.js","App/Components/NavBar/index.js","App/Components/ContentWrapper/index.js","App/Components/SecondaryMenu/index.js","App/Components/Layout/index.js","App/index.js","serviceWorker.js","index.js"],"names":["LoadingWrapper","styled","div","index","className","createGlobalStyle","Theme","primaryTextColor","secondaryTextColor","PostsListContainer","React","lazy","PostViewContainer","UserViewContainer","exact","path","component","NavWrapper","nav","props","theme","NavContent","Logo","h1","NavItems","ul","NavItem","li","StyledLink","Link","map","menu","key","to","children","NavBar","ContentWrapper","App","fallback","Spinner","Layout","Routes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wVAKA,IAAMA,EAAiBC,IAAOC,IAAV,KAsBLC,IAbD,WACZ,OACE,kBAACH,EAAD,KACE,yBAAKI,UAAU,YACb,8BACA,8BACA,8BACA,kC,ujBCnBOC,kBAAf,KCFaC,EAAQ,CACnBC,iBAAkB,UAClBC,mBAAoB,W,OCChBC,EAAqBC,IAAMC,MAAK,kBACpC,gCAEIC,EAAoBF,IAAMC,MAAK,kBACnC,gCAGIE,EAAoBH,IAAMC,MAAK,kBACnC,gCAYaR,EAVD,WACZ,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,gBAAgBC,UAAWH,IAC7C,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAAgBC,UAAWJ,M,u9BCdnD,IAAMK,EAAahB,IAAOiB,IAAV,KAGA,SAACC,GAAD,OAAWA,EAAMC,MAAMZ,sBAKjCa,EAAapB,IAAOC,IAAV,KAQVoB,EAAOrB,IAAOsB,GAAV,KAKJC,EAAWvB,IAAOwB,GAAV,KAMRC,EAAUzB,IAAO0B,GAAV,KAePC,EAAa3B,YAAO4B,IAAP5B,CAAH,KACL,SAACkB,GAAD,OAAWA,EAAMC,MAAMb,oBAoBnBJ,EAjBD,WACZ,OACE,kBAACc,EAAD,KACE,kBAACI,EAAD,KACE,kBAACC,EAAD,qBACA,kBAACE,EAAD,KACG,CAAC,QAAQM,KAAI,SAACC,GAAD,OACZ,kBAACL,EAAD,CAASM,IAAKD,GACZ,kBAACH,EAAD,CAAYK,GAAG,KAAKF,W,sICxDnB9B,UAAOC,IAAtB,K,sJCAeD,IAAOC,IAAtB,KAAeD,ICcAE,EAVD,SAAC,GAAkB,IAAhB+B,EAAe,EAAfA,SACf,OACE,oCACE,kBAACC,EAAD,MAEA,kBAACC,EAAD,KAAiBF,KCcRG,MAff,WACE,OACE,kBAAC,IAAD,CAAejB,MAAOd,GACpB,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUgC,SAAU,kBAACC,EAAA,EAAD,OAClB,kBAACC,EAAD,KACE,kBAACC,EAAD,WCLQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df2130d6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport \"./spinner.css\";\r\n\r\nconst LoadingWrapper = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst index = () => {\r\n  return (\r\n    <LoadingWrapper>\r\n      <div className=\"lds-ring\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </LoadingWrapper>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport default createGlobalStyle`\r\n    *,\r\n  *::after,\r\n  *::before {\r\n    margin: 0px;\r\n    padding: 0px;\r\n    box-sizing: border-box;\r\n  }\r\n  html {\r\n    font-size: 62.5%;\r\n    line-height: 1.6;\r\n  }\r\n  body {\r\n    font-family: 'Roboto', sans-serif;\r\n    position: relative;\r\n  }\r\n  ul {\r\n    list-style: none;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n    color: #ccc;\r\n  }\r\n`;\r\n","export const Theme = {\r\n  primaryTextColor: \"#293241\",\r\n  secondaryTextColor: \"#ee6c4d\",\r\n};\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nconst PostsListContainer = React.lazy(() =>\r\n  import(\"../Containers/Posts/PostList/PostsListContainer\")\r\n);\r\nconst PostViewContainer = React.lazy(() =>\r\n  import(\"../Containers/Posts/PostView/PostViewContainer\")\r\n);\r\n\r\nconst UserViewContainer = React.lazy(() =>\r\n  import(\"../Containers/Users/UserView/UserViewContainer\")\r\n);\r\nconst index = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={PostsListContainer} />\r\n      <Route exact path=\"/user/:userId\" component={UserViewContainer} />\r\n      <Route exact path=\"/post/:postId\" component={PostViewContainer} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst NavWrapper = styled.nav`\r\n  width: 100%;\r\n  height: 6.5rem;\r\n  background: ${(props) => props.theme.secondaryTextColor};\r\n  padding: 2rem;\r\n  display: flex;\r\n`;\r\n\r\nconst NavContent = styled.div`\r\n  width: 70%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Logo = styled.h1`\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst NavItems = styled.ul`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 1rem;\r\n`;\r\n\r\nconst NavItem = styled.li`\r\n  margin-right: 1rem;\r\n  font-size: 2rem;\r\n  font-weight: 300;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  transition: all 0.3s;\r\n  padding: 1.5rem;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background: #f39883;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  color: ${(props) => props.theme.primaryTextColor};\r\n`;\r\n\r\nconst index = () => {\r\n  return (\r\n    <NavWrapper>\r\n      <NavContent>\r\n        <Logo>Sample Forum</Logo>\r\n        <NavItems>\r\n          {[\"Home\"].map((menu) => (\r\n            <NavItem key={menu}>\r\n              <StyledLink to=\"/\">{menu}</StyledLink>\r\n            </NavItem>\r\n          ))}\r\n        </NavItems>\r\n      </NavContent>\r\n    </NavWrapper>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 2rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.div`\r\n  background: #ccc;\r\n  width: 100%;\r\n  height: 5rem;\r\n  /* margin: 2rem 0; */\r\n`;\r\n","import React from \"react\";\r\n\r\nimport NavBar from \"../NavBar\";\r\nimport ContentWrapper from \"../ContentWrapper\";\r\nimport SecondaryMenu from \"../SecondaryMenu\";\r\n\r\nconst index = ({ children }) => {\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {/* <SecondaryMenu /> */}\r\n      <ContentWrapper>{children}</ContentWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React, { Suspense } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport GlobalStyle from \"./Styles/GlobalStyles\";\r\nimport { Theme } from \"./Styles/Theme\";\r\nimport Routes from \"./Routes\";\r\nimport Spinner from \"./Components/Spinner\";\r\nimport Layout from \"./Components/Layout\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={Theme}>\r\n      <GlobalStyle />\r\n      <Router>\r\n        <Suspense fallback={<Spinner />}>\r\n          <Layout>\r\n            <Routes />\r\n          </Layout>\r\n        </Suspense>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}